{
  "name": "express-slash",
  "description": "Express middleware for people who are anal about trailing slashes.",
  "version": "0.2.0",
  "homepage": "https://github.com/ericf/express-slash",
  "keywords": [
    "express",
    "express3",
    "url",
    "urls",
    "slash",
    "trailing",
    "slashes",
    "route",
    "routes",
    "routing"
  ],
  "author": {
    "name": "Eric Ferraiuolo",
    "email": "eferraiuolo@gmail.com",
    "url": "http://ericf.me/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ericf/express-slash.git"
  },
  "bugs": {
    "url": "https://github.com/ericf/express-slash/issues"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {},
  "main": "index",
  "readme": "Express Slash\n=============\n\n[Express][] middleware for people who are anal about trailing slashes.\n\nIf you're a good person, then you enable Express' `\"strict routing\"` because\nyou understand the difference between \"/about\" and \"/about/\". You know that\nthese URLs are not the same and they have different meanings. The trouble is,\nbeing a good person and caring about your trailing slashes is harder than not.\nPlus, you also care about other people, and it would be rude to 404 them when\nthey forget the trailing slash. Luckily, there's this package to solve all your\ntrailing slash problems :D\n\n**This Express middleware should come after your app's `router` middleware.**\nIt will handle [GET and HEAD] requests for URLs which did not have a matching\nroute by either adding or removing a trailing slash to the URL's path, then\nchecking the app's router for a matching route for the new URL, in which case it\nwill redirect the client (301 by default) to that URL.\n\n\n[Express]: https://github.com/visionmedia/express\n\n\nInstallation\n------------\n\nInstall using npm:\n\n```shell\n$ npm install express-slash\n```\n\n\nUsage\n-----\n\nEnable Express' `\"strict routing\"` setting, and add this middleware after your\napp's `router` middleware:\n\n```javascript\nvar express = require('express'),\n    slash   = require('express-slash'),\n\n    app = express();\n\n// Because you're the type of developer who cares about this sort of thing!\napp.enable('strict routing');\n\n// Add the `slash()` middleware after your app's `router`, optionally specify\n// an HTTP status code to use when redirecting (defaults to 301).\napp.use(app.router);\napp.use(slash());\n\napp.get('/', function (req, res) {\n    res.send('Home');\n});\n\napp.get('/about/', function (req, res) {\n    res.send('About');\n});\n\napp.get('/about/people', function (req, res) {\n    res.send('People');\n});\n\napp.listen(3000);\n```\n\nNow when someone navigates to `/about`, they'll be redirected to `/about/`, and\nwhen someone navigates to `/about/people/`, they'll be redirected to\n`/about/people`.\n\n\nLicense\n-------\n\nThis software is free to use under the MIT license.\nSee the [LICENSE file][] for license text and copyright information.\n\n\n[LICENSE file]: https://github.com/ericf/express-slash/blob/master/LICENSE\n",
  "readmeFilename": "README.md",
  "_id": "express-slash@0.2.0",
  "dist": {
    "shasum": "968fd9dd7b5b2380b5c769082a655dc5523720df"
  },
  "_from": "express-slash@0.2.0",
  "_resolved": "https://registry.npmjs.org/express-slash/-/express-slash-0.2.0.tgz"
}
